# This code was auto generated by AfterShip SDK Generator.
# Do not edit the class manually.
require 'spec_helper'
require 'json'
require 'typhoeus'

describe 'Configuration' do
  before do
    ENV['AFTERSHIP_TRACKING_SDK_API_KEY'] = 'some-fake-key'
  end

  after do
    ENV['AFTERSHIP_TRACKING_SDK_API_KEY'] = ''
  end

  describe 'test config' do
    it 'should just work' do
      config = AftershipAPI::Configuration.new
      expect(config.as_api_key).to eql('some-fake-key')
    end

    it 'invalid domain' do
        expect {
           config = AftershipAPI::Configuration.new
           config.domain = 'ftp://example.com'
           config.check
         }.to raise_error(AftershipAPI::InvalidOptionError)
      end

    it 'empty as-api-key' do
        ENV['AFTERSHIP_TRACKING_SDK_API_KEY'] = ''
        expect {	
          config = AftershipAPI::Configuration.new
          config.check
        }.to raise_error(AftershipAPI::InvalidOptionError)
      end

    it 'invalid authentication type' do
        expect {
           config = AftershipAPI::Configuration.new
           config.authentication_type = 'plain-text'
           config.check
         }.to raise_error(AftershipAPI::InvalidOptionError)
      end

    it 'authentication_type cannot be API_KEY if as_api_secret is set' do
        expect {
           config = AftershipAPI::Configuration.new
           config.as_api_secret = "RSA key .."
           config.check
         }.to raise_error(AftershipAPI::InvalidOptionError)
      end

    it 'max_retry and timeout cannot be negative' do
        expect {
           config = AftershipAPI::Configuration.new
           config.timeout = -1
           config.check
         }.to raise_error(AftershipAPI::InvalidOptionError)
        expect {
          config = AftershipAPI::Configuration.new
          config.max_retry = -2
          config.check
        }.to raise_error(AftershipAPI::InvalidOptionError)
        expect {
          config = AftershipAPI::Configuration.new
          config.max_retry = 11
          config.check
        }.to raise_error(AftershipAPI::InvalidOptionError)
      end

    it 'defaults' do
        config = AftershipAPI::Configuration.new
        expect(config.max_retry).to eql(2)
        expect(config.timeout).to eql(30)
        expect(config.user_agent).to eql("aftership-sdk-ruby/#{AftershipAPI::VERSION} (https://www.aftership.com) typhoeus/#{Typhoeus::VERSION}")
      end
  end
end
