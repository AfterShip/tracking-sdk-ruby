# This code was auto generated by AfterShip SDK Generator.
# Do not edit the class manually.
require 'spec_helper'
require 'json'
require 'webmock'

include WebMock::API

describe 'API Clients' do
  current_api_key = ENV['AFTERSHIP_TRACKING_SDK_API_KEY']
  before do
  end

  after do
	# restore
    ENV['AFTERSHIP_TRACKING_SDK_API_KEY'] = current_api_key
    # restore config
    AftershipAPI.configure do |config|
      config.domain = 'https://api.aftership.io/'
      config.timeout = 30
    end
  end

  describe 'test config' do
    it 'should 401' do
      ENV['AFTERSHIP_TRACKING_SDK_API_KEY'] = 'some-fake-key'
      AftershipAPI.configure
      expect {
        resp = AftershipAPI::Tracking.get_trackings
      }.to raise_error(AftershipAPI::ApiError) { |error|
        expect(error.status_code).to eql(401)
        expect(error.error_code).to eql(AftershipAPI::API_KEY_INVALID)
      }
    end

    it 'should call api with api key' do
      AftershipAPI.configure do |config|
        config.as_api_key = 'asat_12438a6545ef438494236355511344df'
        config.domain = 'https://api.aftership.io/'
      end
      # use new config key
      resp = AftershipAPI::Tracking.get_trackings
      resp.to_json
    end

    it 'should call api with api key + AES' do
      AftershipAPI.configure do |config|
        config.as_api_key = 'asak_95b8374e81434a8483a2291b82d2733d'
        config.as_api_secret = 'assk_bc9a1831f1bd47b58e0f35ecb197e2fc'
        config.authentication_type = AftershipAPI::AUTHENTICATION_TYPE_AES
        config.domain = 'https://api.aftership.io/'
      end
      # use new config key
      resp = AftershipAPI::Tracking.get_trackings
    end

    it 'should call get_tracking_by_id with api key' do
      AftershipAPI.configure do |config|
        config.as_api_key = 'asat_12438a6545ef438494236355511344df'
        config.domain = 'https://api.aftership.io/'
      end
      # use new config key
      resp = AftershipAPI::Tracking.get_tracking_by_id(id: "phx725njuggxqlty80rmq01e")
      expect(resp.instance_of? AftershipAPI::Model::Tracking).to eql(true)
    end

    it 'should raise InvalidParamError' do
      AftershipAPI.configure do |config|
        config.as_api_key = 'asat_12438a6545ef438494236355511344df'
        config.domain = 'https://api.aftership.io/'
      end
      # use new config key
      expect {
        resp = AftershipAPI::Tracking.get_tracking_by_id(id: "")
      }.to raise_error(AftershipAPI::InvalidParamError) { |error|
        expect(error.message).to eql("id cannot be nil or empty")
      }
    end

    it 'should call create_tracking with api key' do
      AftershipAPI.configure do |config|
        config.as_api_key = 'asat_12438a6545ef438494236355511344df'
        config.domain = 'https://api.aftership.io/'
      end
      tracking_number = "ITD-1-RUBUSDK#{Time.now.to_i}"
      tracking = AftershipAPI::Model::TrackingCreateTrackingRequest.new({
        tracking_number: tracking_number,
        slug: "testing-courier"
      })
      resp = AftershipAPI::Tracking.create_tracking(body: tracking)
      expect(resp.instance_of? AftershipAPI::Model::Tracking).to eql(true)
      expect(resp.tracking_number).to eql(tracking_number)
    end

    it 'should timeout' do
      WebMock.enable!
      stub_request(:get, /api.mock/).to_timeout

      AftershipAPI.configure do |config|
        config.domain = 'http://api.mock'
        config.timeout = 1
      end
      # use new config key
      expect {
        AftershipAPI::Tracking.get_tracking_by_id(id: "phx725njuggxqlty80rmq01e")
      }.to raise_error(AftershipAPI::ApiError) { |error|
        expect(error.error_code).to eql(AftershipAPI::TIMED_OUT)
      }
      WebMock.disable!
    end
  end
end
