# This code was auto generated by AfterShip SDK Generator.
# Do not edit the class manually.
require 'json'

module AftershipAPI
  REQUEST_ERROR = 'REQUEST_ERROR'

  # Common AfterShipError
  INVALID_API_KEY = 'INVALID_API_KEY'.freeze
  INVALID_OPTION = 'INVALID_OPTION'.freeze
  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED'.freeze
  TIMED_OUT = "TIMED_OUT".freeze

  INVALID_REQUEST = "INVALID_REQUEST".freeze
  INVALID_JSON = "INVALID_JSON".freeze
  TRACKING_ALREADY_EXIST = "TRACKING_ALREADY_EXIST".freeze
  TRACKING_DOES_NOT_EXIST = "TRACKING_DOES_NOT_EXIST".freeze
  TRACKING_NUMBER_INVALID = "TRACKING_NUMBER_INVALID".freeze
  TRACKING_REQUIRED = "TRACKING_REQUIRED".freeze
  TRACKING_NUMBER_REQUIRED = "TRACKING_NUMBER_REQUIRED".freeze
  VALUE_INVALID = "VALUE_INVALID".freeze
  VALUE_REQUIRED = "VALUE_REQUIRED".freeze
  SLUG_INVALID = "SLUG_INVALID".freeze
  MISSING_OR_INVALID_REQUIRED_FIELD = "MISSING_OR_INVALID_REQUIRED_FIELD".freeze
  BAD_COURIER = "BAD_COURIER".freeze
  INACTIVE_RETRACK_NOT_ALLOWED = "INACTIVE_RETRACK_NOT_ALLOWED".freeze
  NOTIFICATION_REUQIRED = "NOTIFICATION_REUQIRED".freeze
  ID_INVALID = "ID_INVALID".freeze
  RETRACK_ONCE_ALLOWED = "RETRACK_ONCE_ALLOWED".freeze
  TRACKING_NUMBER_FORMAT_INVALID = "TRACKING_NUMBER_FORMAT_INVALID".freeze
  API_KEY_INVALID = "API_KEY_INVALID".freeze
  REQUEST_NOT_ALLOWED = "REQUEST_NOT_ALLOWED".freeze
  NOT_FOUND = "NOT_FOUND".freeze
  TOO_MANY_REQUEST = "TOO_MANY_REQUEST".freeze
  INTERNAL_ERROR = "INTERNAL_ERROR".freeze

  ERROR_MAP = {
    # Format: metaCode => ErrorCode
    400 => INVALID_REQUEST,
    4001 => INVALID_JSON,
    4003 => TRACKING_ALREADY_EXIST,
    4004 => TRACKING_DOES_NOT_EXIST,
    4005 => TRACKING_NUMBER_INVALID,
    4006 => TRACKING_REQUIRED,
    4007 => TRACKING_NUMBER_REQUIRED,
    4008 => VALUE_INVALID,
    4009 => VALUE_REQUIRED,
    4010 => SLUG_INVALID,
    4011 => MISSING_OR_INVALID_REQUIRED_FIELD,
    4012 => BAD_COURIER,
    4013 => INACTIVE_RETRACK_NOT_ALLOWED,
    4014 => NOTIFICATION_REUQIRED,
    4015 => ID_INVALID,
    4016 => RETRACK_ONCE_ALLOWED,
    4017 => TRACKING_NUMBER_FORMAT_INVALID,
    401 => API_KEY_INVALID,
    403 => REQUEST_NOT_ALLOWED,
    404 => NOT_FOUND,
    429 => TOO_MANY_REQUEST,
    500 => INTERNAL_ERROR,
    502 => INTERNAL_ERROR,
    503 => INTERNAL_ERROR,
    504 => INTERNAL_ERROR,
  }


  class ApiError < StandardError
    attr_reader :status_code, :response_headers, :response_body, :meta_code, :error_code

    # Usage examples:
    #   ApiError.new
    #   ApiError.new("message")
    #   ApiError.new(:status_code => 500, :response_headers => {}, :response_body => "")
    #   ApiError.new(:status_code => 404, :message => "Not Found")
    def initialize(arg = nil)
      if arg.is_a? Hash
        if arg.key?(:message) || arg.key?('message')
          super(arg[:message] || arg['message'])
        else
          super arg
        end

        response_body = JSON.parse(arg[:response_body], :symbolize_names => true) rescue nil
        @message = REQUEST_ERROR
        if response_body && response_body[:meta] && response_body[:meta][:code]
          @meta_code = response_body[:meta][:code]
          @error_code = ERROR_MAP[@meta_code] || REQUEST_ERROR
          @message = response_body[:meta][:message] || REQUEST_ERROR
        end
        arg.each do |k, v|
          instance_variable_set "@#{k}", v
        end
      else
        super arg
        @message = arg
      end
    end

    # Override to_s to display a friendly error message
    def to_s
      message
    end

    def message
      if @message.nil?
        msg = "Error message: the server returns an error"
      else
        msg = @message
      end

      msg += "\nHTTP status code: #{status_code}" if status_code
      msg += "\nError Code #{error_code}" if error_code
      msg += "\nResponse headers: #{response_headers}" if response_headers
      msg += "\nResponse body: #{response_body}" if response_body

      msg
    end
  end

  class InvalidOptionError < StandardError
  end

  class InvalidParamError < StandardError
  end
end
