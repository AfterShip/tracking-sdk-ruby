# This code was auto generated by AfterShip SDK Generator.
# Do not edit the class manually.
require 'uri'
require 'typhoeus'

module AftershipAPI
  AUTHENTICATION_TYPE_API_KEY = 'API_KEY'
  AUTHENTICATION_TYPE_AES = 'AES'
  AUTHENTICATION_TYPE_RSA = 'RSA'
  
  SDK_PREFIX = 'AFTERSHIP_TRACKING_SDK'
  
  
  class Configuration
    def get_env(key)
      ENV[SDK_PREFIX + '_' + key]
    end
  
    # Defines domain
    attr_accessor :domain
  
    # Defines the authentication type used in the API.
    #
    # @return ["API_KEY", "AES", "RSA"]
    attr_accessor :authentication_type
  
    # Defines API keys used with API Key authentications.
    #
    # @return [string]
    attr_accessor :as_api_key
  
    # Defines AES secret or RSA private key used with AES or RSA authentications.
    #
    # @return [string]
    attr_accessor :as_api_secret
  
    # Defines the user agent used in the API requests.
    # Default to 'aftership-sdk-ruby/$VERSION'
    #
    # @return [string]
    attr_accessor :user_agent
  
    # Set this to enable/disable debugging. When enabled (set to true), HTTP request/response
    # details will be logged with `logger.debug` (see the `logger` attribute).
    # Default to false.
    #
    # @return [true, false]
    attr_accessor :debugging
  
    # Defines the logger used for debugging.
    # Default to `Rails.logger` (when in Rails) or logging to STDOUT.
    #
    # @return [#debug]
    attr_accessor :logger
  
    # The time limit for HTTP request in seconds.
    # Default to 30 
    attr_accessor :timeout
  
    # When response is a retryable error, retry current request
    # Default to 2
    attr_accessor :max_retry
  
    # HTTP proxy
    attr_accessor :proxy

    attr_accessor :aftership_client

    attr_accessor :headers
  
  
    def initialize
      default_user_agent = "aftership-sdk-ruby/#{AftershipAPI::VERSION} (https://www.aftership.com) typhoeus/#{Typhoeus::VERSION}"

      @domain = get_env('DOMAIN') || 'https://api.aftership.com'
      @authentication_type = get_env('AUTHENTICATION_TYPE') || AUTHENTICATION_TYPE_API_KEY
      @as_api_key = get_env('API_KEY') || ''
      @as_api_secret = get_env('API_SECRET') || ''
      @user_agent = get_env('USER_AGENT') || default_user_agent
      @aftership_client = default_user_agent
      @timeout = (get_env('TIMEOUT') || 30).to_i
      @max_retry = (get_env('MAX_RETRY') || 2).to_i
      @proxy = get_env('PROXY')
      @debugging = get_env('DEBUGGING') || false
      @logger = defined?(Rails) ? Rails.logger : Logger.new(STDOUT)
      @headers = {}

      yield(self) if block_given?
    end
  
    # The default Configuration object.
    def self.default
      @@default ||= Configuration.new
    end
  
    def configure
      yield(self) if block_given?
    end
  
    def domain=(domain)
      @domain = domain.sub(/\/+\z/, '')
    end
  
    def check
      fail InvalidOptionError.new("Invalid authentication type: #{authentication_type}") unless [AUTHENTICATION_TYPE_API_KEY, AUTHENTICATION_TYPE_AES, AUTHENTICATION_TYPE_RSA].include?(authentication_type)
      fail InvalidOptionError.new("as_api_key cannot be empty") unless as_api_key.to_s.size > 0
      fail InvalidOptionError.new("Invalid base URL: #{domain}") unless valid_url?(domain)
      fail InvalidOptionError.new("authentication type must not be API_KEY if as_api_secret is set") if as_api_secret.to_s.size > 0 && authentication_type == AUTHENTICATION_TYPE_API_KEY
      fail InvalidOptionError.new("timeout cannot be negative, value #{timeout}") unless timeout.to_i >= 0
      fail InvalidOptionError.new("max_retry must be in range 0..10, value #{max_retry}") unless max_retry.to_i >= 0 and max_retry.to_i <= 10
      fail InvalidOptionError.new("max_retry cannot be negative, value #{max_retry}") unless max_retry.to_i >= 0
    end
  
    def valid_url?(url)
      uri = URI.parse(url)
      uri.is_a?(URI::HTTP) || uri.is_a?(URI::HTTPS)
      rescue URI::InvalidURIError
        false
    end
  end
end
  