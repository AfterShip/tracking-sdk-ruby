# This code was auto generated by AfterShip SDK Generator.
# Do not edit the class manually.
require 'cgi'

module AftershipAPI
  class TrackingApi 
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # create_tracking
    # Create a tracking.<div style="visibility:hidden; height: 0"></div>

    # @param body [Model::TrackingCreateTrackingRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Model::Tracking] 
    def create_tracking(body:,opts: {})
      if "tracking" != ""
        body = {:'tracking' => body}
      end
      opts[:body] = body
      data, _status_code, _headers = create_tracking_with_http_info(opts: opts)
      data
    end

    def create_tracking_with_http_info(opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.create_tracking ...'
      end



      # resource path
      local_var_path = "/tracking/2024-04/trackings" 
      method = :'POST'

      # query parameters
      query_params = opts[:query_params] || {}
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'Tracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.create_tracking",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#create_tracking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # delete_tracking_by_id
    # Delete a tracking.
    # @param id [String] tracking ID
    # @param [Hash] opts the optional parameters
    # @return [Model::PartialDeleteTracking] 
    def delete_tracking_by_id(id:, opts: {})
      data, _status_code, _headers = delete_tracking_by_id_with_http_info(id:id, opts: opts)
      data
    end

    def delete_tracking_by_id_with_http_info(id:, opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.delete_tracking_by_id ...'
      end

      if id.nil? or id.to_s == ''
        raise InvalidParamError.new "id cannot be nil or empty"
      end


      # resource path
      local_var_path = "/tracking/2024-04/trackings/#{id}" 
      method = :'DELETE'

      # query parameters
      query_params = opts[:query_params] || {}
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'PartialDeleteTracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.delete_tracking_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#delete_tracking_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # delete_tracking_by_slug_tracking_number
    # Delete a tracking.
    # @param slug [String] Tracking slug
    # @param tracking_number [String] Tracking number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tracking_account_number Additional field required by some carriers to retrieve the tracking info. The shipper’s carrier account number. Refer to our article on  for more details.
    # @option opts [String] :tracking_origin_country Additional field required by some carriers to retrieve the tracking info. The origin country/region of the shipment. Refer to our article on  for more details.
    # @option opts [String] :tracking_destination_country Additional field required by some carriers to retrieve the tracking info. The destination country/region of the shipment. Refer to our article on  for more details.
    # @option opts [String] :tracking_key Additional field required by some carriers to retrieve the tracking info. A type of tracking credential required by some carriers. Refer to our article on  for more details.
    # @option opts [String] :tracking_postal_code Additional field required by some carriers to retrieve the tracking info. The postal code of the recipient’s address. Refer to our article on  for more details.
    # @option opts [String] :tracking_ship_date Additional field required by some carriers to retrieve the tracking info. The date the shipment was sent, using the format YYYYMMDD. Refer to our article on  for more details.
    # @option opts [String] :tracking_state Additional field required by some carriers to retrieve the tracking info. The state/province of the recipient’s address. Refer to our article on  for more details.
    # @return [Model::PartialDeleteTracking] 
    def delete_tracking_by_slug_tracking_number(slug:, tracking_number:, opts: {})
      data, _status_code, _headers = delete_tracking_by_slug_tracking_number_with_http_info(slug:slug, tracking_number:tracking_number, opts: opts)
      data
    end

    def delete_tracking_by_slug_tracking_number_with_http_info(slug:, tracking_number:, opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.delete_tracking_by_slug_tracking_number ...'
      end

      if slug.nil? or slug.to_s == ''
        raise InvalidParamError.new "slug cannot be nil or empty"
      end
      if tracking_number.nil? or tracking_number.to_s == ''
        raise InvalidParamError.new "tracking_number cannot be nil or empty"
      end


      # resource path
      local_var_path = "/tracking/2024-04/trackings/#{slug}/#{tracking_number}" 
      method = :'DELETE'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tracking_account_number'] = opts[:'tracking_account_number'] if !opts[:'tracking_account_number'].nil?
      query_params[:'tracking_origin_country'] = opts[:'tracking_origin_country'] if !opts[:'tracking_origin_country'].nil?
      query_params[:'tracking_destination_country'] = opts[:'tracking_destination_country'] if !opts[:'tracking_destination_country'].nil?
      query_params[:'tracking_key'] = opts[:'tracking_key'] if !opts[:'tracking_key'].nil?
      query_params[:'tracking_postal_code'] = opts[:'tracking_postal_code'] if !opts[:'tracking_postal_code'].nil?
      query_params[:'tracking_ship_date'] = opts[:'tracking_ship_date'] if !opts[:'tracking_ship_date'].nil?
      query_params[:'tracking_state'] = opts[:'tracking_state'] if !opts[:'tracking_state'].nil?
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'PartialDeleteTracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.delete_tracking_by_slug_tracking_number",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#delete_tracking_by_slug_tracking_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # get_tracking_by_id
    # Get tracking results of a single tracking.
    # @param id [String] tracking ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields List of fields to include in the response. Use comma for multiple values. Fields to include: `tracking_postal_code`, `tracking_ship_date`, `tracking_account_number`, `tracking_key`, `tracking_origin_country`, `tracking_destination_country`, `tracking_state`, `title`, `order_id`, `tag`, `checkpoints`
    # @option opts [String] :lang Translate checkpoint messages from the carrier’s provided language to the target language. Supported target languages include:</br>&nbsp;&nbsp;&nbsp;&nbsp;- English (en)</br>&nbsp;&nbsp;&nbsp;&nbsp;- French (fr)</br>&nbsp;&nbsp;&nbsp;&nbsp;- French Canadian (fr-CA)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Arabic (ar)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Bulgarian (bg)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Catalan (ca)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Croatian (hr)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Czech (cs)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Danish (da)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Dutch (nl)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Estonian (et)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Filipino (tl)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Finnish (fi)</br>&nbsp;&nbsp;&nbsp;&nbsp;- German (de)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Greek (el)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Hebrew (he)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Hindi (hi)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Hungarian (hu)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Indonesian (id)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Italian (it)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Japanese (ja)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Korean (ko)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Latvian (lv)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Lithuanian (lt)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Malay (ms)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Polish (pl)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Portuguese (pt)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Romanian (ro)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Russian (ru)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Serbian (sr)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Slovak (sk)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Slovenian (sl)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Spanish (es)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Swedish (sv)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Thai (th)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Turkish (tr)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Ukrainian (uk)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Vietnamese (vi)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Simplified Chinese (zh-Hans)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Traditional Chinese (zh-Hant)</br>&nbsp;&nbsp;&nbsp;&nbsp;- Norwegian (nb)</br>
    # @return [Model::Tracking] 
    def get_tracking_by_id(id:, opts: {})
      data, _status_code, _headers = get_tracking_by_id_with_http_info(id:id, opts: opts)
      data
    end

    def get_tracking_by_id_with_http_info(id:, opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.get_tracking_by_id ...'
      end

      if id.nil? or id.to_s == ''
        raise InvalidParamError.new "id cannot be nil or empty"
      end


      # resource path
      local_var_path = "/tracking/2024-04/trackings/#{id}" 
      method = :'GET'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'lang'] = opts[:'lang'] if !opts[:'lang'].nil?
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'Tracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.get_tracking_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_tracking_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # get_tracking_by_slug_tracking_number
    # Get tracking results of a single tracking.
    # @param slug [String] Tracking slug
    # @param tracking_number [String] Tracking number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields List of fields to include in the response. Use comma for multiple values. Fields to include: `tracking_postal_code`, `tracking_ship_date`, `tracking_account_number`, `tracking_key`, `tracking_origin_country`, `tracking_destination_country`, `tracking_state`, `title`, `order_id`, `tag`, `checkpoints`
    # @option opts [String] :lang Support Chinese to English translation for `china-ems` and  `china-post`  only
    # @option opts [String] :tracking_account_number Additional field required by some carriers to retrieve the tracking info. The shipper’s carrier account number. Refer to our article on  for more details.
    # @option opts [String] :tracking_origin_country Additional field required by some carriers to retrieve the tracking info. The origin country/region of the shipment. Refer to our article on  for more details.
    # @option opts [String] :tracking_destination_country Additional field required by some carriers to retrieve the tracking info. The destination country/region of the shipment. Refer to our article on  for more details.
    # @option opts [String] :tracking_key Additional field required by some carriers to retrieve the tracking info. A type of tracking credential required by some carriers. Refer to our article on  for more details.
    # @option opts [String] :tracking_postal_code Additional field required by some carriers to retrieve the tracking info. The postal code of the recipient’s address. Refer to our article on  for more details.
    # @option opts [String] :tracking_ship_date Additional field required by some carriers to retrieve the tracking info. The date the shipment was sent, using the format YYYYMMDD. Refer to our article on  for more details.
    # @option opts [String] :tracking_state Additional field required by some carriers to retrieve the tracking info. The state/province of the recipient’s address. Refer to our article on  for more details.
    # @return [Model::Tracking] 
    def get_tracking_by_slug_tracking_number(slug:, tracking_number:, opts: {})
      data, _status_code, _headers = get_tracking_by_slug_tracking_number_with_http_info(slug:slug, tracking_number:tracking_number, opts: opts)
      data
    end

    def get_tracking_by_slug_tracking_number_with_http_info(slug:, tracking_number:, opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.get_tracking_by_slug_tracking_number ...'
      end

      if slug.nil? or slug.to_s == ''
        raise InvalidParamError.new "slug cannot be nil or empty"
      end
      if tracking_number.nil? or tracking_number.to_s == ''
        raise InvalidParamError.new "tracking_number cannot be nil or empty"
      end


      # resource path
      local_var_path = "/tracking/2024-04/trackings/#{slug}/#{tracking_number}" 
      method = :'GET'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'lang'] = opts[:'lang'] if !opts[:'lang'].nil?
      query_params[:'tracking_account_number'] = opts[:'tracking_account_number'] if !opts[:'tracking_account_number'].nil?
      query_params[:'tracking_origin_country'] = opts[:'tracking_origin_country'] if !opts[:'tracking_origin_country'].nil?
      query_params[:'tracking_destination_country'] = opts[:'tracking_destination_country'] if !opts[:'tracking_destination_country'].nil?
      query_params[:'tracking_key'] = opts[:'tracking_key'] if !opts[:'tracking_key'].nil?
      query_params[:'tracking_postal_code'] = opts[:'tracking_postal_code'] if !opts[:'tracking_postal_code'].nil?
      query_params[:'tracking_ship_date'] = opts[:'tracking_ship_date'] if !opts[:'tracking_ship_date'].nil?
      query_params[:'tracking_state'] = opts[:'tracking_state'] if !opts[:'tracking_state'].nil?
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'Tracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.get_tracking_by_slug_tracking_number",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_tracking_by_slug_tracking_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # get_trackings
    # Get tracking results of multiple trackings.<div style="visibility:hidden; height: 0"></div>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page to query. Maximum page number is bounded by total number of queried trackings which cannot exceed 160,000 trackings. (Default: 1)
    # @option opts [Integer] :limit Number of trackings each page contain. (Default: 100, Max: 200)
    # @option opts [String] :keyword Search the content of the tracking record fields: `tracking_number`, `title`, `order_id`, `customer_name`, `custom_fields`, `emails`, `smses`
    # @option opts [String] :tracking_numbers Tracking number of shipments. Use comma to separate multiple values (Example: RA123456789US,LE123456789US). Supports up to 50 tracking numbers.
    # @option opts [String] :slug Unique courier code Use comma for multiple values. (Example: dhl,ups,usps)
    # @option opts [Integer] :transit_time Total delivery time in days.- When the shipment is delivered: Transit time = Delivered date - Picked up date- When the shipment is not delivered: Transit time = Current date - Picked up dateValue as `null` for the shipment without pickup date.
    # @option opts [String] :origin Origin country/region of trackings. Use ISO Alpha-3 (three letters). Use comma for multiple values. (Example: USA,HKG)
    # @option opts [String] :destination Destination country/region of trackings. Use ISO Alpha-3 (three letters). Use comma for multiple values. (Example: USA,HKG)
    # @option opts [String] :tag Current status of tracking. Values include `Pending`, `InfoReceived`, `InTransit`, `OutForDelivery`, `AttemptFail`, `Delivered`, `AvailableForPickup`, `Exception`, `Expired` (See tag definition)
    # @option opts [String] :created_at_min Start date and time of trackings created. AfterShip only stores data of 120 days.(Defaults: 30 days ago, Example: 2013-03-15T16:41:56+08:00)
    # @option opts [String] :created_at_max End date and time of trackings created.(Defaults: now, Example: 2013-04-15T16:41:56+08:00)
    # @option opts [String] :updated_at_min Start date and time of trackings updated. (Example: 2013-04-15T16:41:56+08:00)
    # @option opts [String] :updated_at_max End date and time of trackings updated. (Example: 2013-04-15T16:41:56+08:00)
    # @option opts [String] :fields List of fields to include in the response. Use comma for multiple values. Available options: `title`, `order_id`, `tag`, `checkpoints`. Example: `title,order_id`
    # @option opts [String] :return_to_sender Select return to sender, the value should be `true` or `false`, with optional comma separated.
    # @option opts [String] :courier_destination_country_iso3 Destination country/region of trackings returned by courier. Use ISO Alpha-3 (three letters). Use comma for multiple values. (Example: USA,HKG)
    # @option opts [String] :shipment_tags Tags you added to your shipments to help categorize and filter them easily. Use a comma to separate multiple values (Example: a,b)
    # @option opts [String] :order_id A globally-unique identifier for the order. Use comma for multiple values.(Example: 6845a095a27a4caeb27487806f058add,4845a095a27a4caeb27487806f058abc)
    # @return [Model::GetTrackingsResponse] 
    def get_trackings(opts: {})
      data, _status_code, _headers = get_trackings_with_http_info(opts: opts)
      data
    end

    def get_trackings_with_http_info(opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.get_trackings ...'
      end



      # resource path
      local_var_path = "/tracking/2024-04/trackings" 
      method = :'GET'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'keyword'] = opts[:'keyword'] if !opts[:'keyword'].nil?
      query_params[:'tracking_numbers'] = opts[:'tracking_numbers'] if !opts[:'tracking_numbers'].nil?
      query_params[:'slug'] = opts[:'slug'] if !opts[:'slug'].nil?
      query_params[:'transit_time'] = opts[:'transit_time'] if !opts[:'transit_time'].nil?
      query_params[:'origin'] = opts[:'origin'] if !opts[:'origin'].nil?
      query_params[:'destination'] = opts[:'destination'] if !opts[:'destination'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'created_at_min'] = opts[:'created_at_min'] if !opts[:'created_at_min'].nil?
      query_params[:'created_at_max'] = opts[:'created_at_max'] if !opts[:'created_at_max'].nil?
      query_params[:'updated_at_min'] = opts[:'updated_at_min'] if !opts[:'updated_at_min'].nil?
      query_params[:'updated_at_max'] = opts[:'updated_at_max'] if !opts[:'updated_at_max'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'return_to_sender'] = opts[:'return_to_sender'] if !opts[:'return_to_sender'].nil?
      query_params[:'courier_destination_country_iso3'] = opts[:'courier_destination_country_iso3'] if !opts[:'courier_destination_country_iso3'].nil?
      query_params[:'shipment_tags'] = opts[:'shipment_tags'] if !opts[:'shipment_tags'].nil?
      query_params[:'order_id'] = opts[:'order_id'] if !opts[:'order_id'].nil?
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'GetTrackingsResponse'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.get_trackings",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "trackings",
        :is_paging => true
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_trackings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # mark_tracking_completed_by_id
    # Mark a tracking as completed. The tracking won't auto update until retrack it.
    # @param id [String] tracking id

    # @param body [Model::MarkTrackingCompletedByIdRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Model::Tracking] 
    def mark_tracking_completed_by_id(id:, body:,opts: {})
      if "" != ""
        body = {:'' => body}
      end
      opts[:body] = body
      data, _status_code, _headers = mark_tracking_completed_by_id_with_http_info(id:id, opts: opts)
      data
    end

    def mark_tracking_completed_by_id_with_http_info(id:, opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.mark_tracking_completed_by_id ...'
      end

      if id.nil? or id.to_s == ''
        raise InvalidParamError.new "id cannot be nil or empty"
      end


      # resource path
      local_var_path = "/tracking/2024-04/trackings/#{id}/mark-as-completed" 
      method = :'POST'

      # query parameters
      query_params = opts[:query_params] || {}
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'Tracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.mark_tracking_completed_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#mark_tracking_completed_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # mark_tracking_completed_by_slug_tracking_number
    # Mark a tracking as completed. The tracking won't auto update until retrack it.
    # @param slug [String] Tracking slug
    # @param tracking_number [String] Tracking number

    # @param body [Model::MarkTrackingCompletedBySlugTrackingNumberRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tracking_account_number Additional field required by some carriers to retrieve the tracking info. The shipper’s carrier account number. Refer to our article on  for more details.
    # @option opts [String] :tracking_origin_country Additional field required by some carriers to retrieve the tracking info. The origin country/region of the shipment. Refer to our article on  for more details.
    # @option opts [String] :tracking_destination_country Additional field required by some carriers to retrieve the tracking info. The destination country/region of the shipment. Refer to our article on  for more details.
    # @option opts [String] :tracking_key Additional field required by some carriers to retrieve the tracking info. A type of tracking credential required by some carriers. Refer to our article on  for more details.
    # @option opts [String] :tracking_postal_code Additional field required by some carriers to retrieve the tracking info. The postal code of the recipient’s address. Refer to our article on  for more details.
    # @option opts [String] :tracking_ship_date Additional field required by some carriers to retrieve the tracking info. The date the shipment was sent, using the format YYYYMMDD. Refer to our article on  for more details.
    # @option opts [String] :tracking_state Additional field required by some carriers to retrieve the tracking info. The state/province of the recipient’s address. Refer to our article on  for more details.
    # @return [Model::Tracking] 
    def mark_tracking_completed_by_slug_tracking_number(slug:, tracking_number:, body:,opts: {})
      if "" != ""
        body = {:'' => body}
      end
      opts[:body] = body
      data, _status_code, _headers = mark_tracking_completed_by_slug_tracking_number_with_http_info(slug:slug, tracking_number:tracking_number, opts: opts)
      data
    end

    def mark_tracking_completed_by_slug_tracking_number_with_http_info(slug:, tracking_number:, opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.mark_tracking_completed_by_slug_tracking_number ...'
      end

      if slug.nil? or slug.to_s == ''
        raise InvalidParamError.new "slug cannot be nil or empty"
      end
      if tracking_number.nil? or tracking_number.to_s == ''
        raise InvalidParamError.new "tracking_number cannot be nil or empty"
      end


      # resource path
      local_var_path = "/tracking/2024-04/trackings/#{slug}/#{tracking_number}/mark-as-completed" 
      method = :'POST'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tracking_account_number'] = opts[:'tracking_account_number'] if !opts[:'tracking_account_number'].nil?
      query_params[:'tracking_origin_country'] = opts[:'tracking_origin_country'] if !opts[:'tracking_origin_country'].nil?
      query_params[:'tracking_destination_country'] = opts[:'tracking_destination_country'] if !opts[:'tracking_destination_country'].nil?
      query_params[:'tracking_key'] = opts[:'tracking_key'] if !opts[:'tracking_key'].nil?
      query_params[:'tracking_postal_code'] = opts[:'tracking_postal_code'] if !opts[:'tracking_postal_code'].nil?
      query_params[:'tracking_ship_date'] = opts[:'tracking_ship_date'] if !opts[:'tracking_ship_date'].nil?
      query_params[:'tracking_state'] = opts[:'tracking_state'] if !opts[:'tracking_state'].nil?
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'Tracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.mark_tracking_completed_by_slug_tracking_number",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#mark_tracking_completed_by_slug_tracking_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # retrack_tracking_by_id
    # Retrack an expired tracking. Max 3 times per tracking.
    # @param id [String] tracking id
    # @param [Hash] opts the optional parameters
    # @return [Model::PartialUpdateTracking] 
    def retrack_tracking_by_id(id:, opts: {})
      data, _status_code, _headers = retrack_tracking_by_id_with_http_info(id:id, opts: opts)
      data
    end

    def retrack_tracking_by_id_with_http_info(id:, opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.retrack_tracking_by_id ...'
      end

      if id.nil? or id.to_s == ''
        raise InvalidParamError.new "id cannot be nil or empty"
      end


      # resource path
      local_var_path = "/tracking/2024-04/trackings/#{id}/retrack" 
      method = :'POST'

      # query parameters
      query_params = opts[:query_params] || {}
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'PartialUpdateTracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.retrack_tracking_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#retrack_tracking_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # retrack_tracking_by_slug_tracking_number
    # Retrack an expired tracking. Max 3 times per tracking.
    # @param slug [String] Tracking slug
    # @param tracking_number [String] Tracking number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tracking_account_number Additional field required by some carriers to retrieve the tracking info. The shipper’s carrier account number. Refer to our article on  for more details.
    # @option opts [String] :tracking_origin_country Additional field required by some carriers to retrieve the tracking info. The origin country/region of the shipment. Refer to our article on  for more details.
    # @option opts [String] :tracking_destination_country Additional field required by some carriers to retrieve the tracking info. The destination country/region of the shipment. Refer to our article on  for more details.
    # @option opts [String] :tracking_key Additional field required by some carriers to retrieve the tracking info. A type of tracking credential required by some carriers. Refer to our article on  for more details.
    # @option opts [String] :tracking_postal_code Additional field required by some carriers to retrieve the tracking info. The postal code of the recipient’s address. Refer to our article on  for more details.
    # @option opts [String] :tracking_ship_date Additional field required by some carriers to retrieve the tracking info. The date the shipment was sent, using the format YYYYMMDD. Refer to our article on  for more details.
    # @option opts [String] :tracking_state Additional field required by some carriers to retrieve the tracking info. The state/province of the recipient’s address. Refer to our article on  for more details.
    # @return [Model::PartialUpdateTracking] 
    def retrack_tracking_by_slug_tracking_number(slug:, tracking_number:, opts: {})
      data, _status_code, _headers = retrack_tracking_by_slug_tracking_number_with_http_info(slug:slug, tracking_number:tracking_number, opts: opts)
      data
    end

    def retrack_tracking_by_slug_tracking_number_with_http_info(slug:, tracking_number:, opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.retrack_tracking_by_slug_tracking_number ...'
      end

      if slug.nil? or slug.to_s == ''
        raise InvalidParamError.new "slug cannot be nil or empty"
      end
      if tracking_number.nil? or tracking_number.to_s == ''
        raise InvalidParamError.new "tracking_number cannot be nil or empty"
      end


      # resource path
      local_var_path = "/tracking/2024-04/trackings/#{slug}/#{tracking_number}/retrack" 
      method = :'POST'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tracking_account_number'] = opts[:'tracking_account_number'] if !opts[:'tracking_account_number'].nil?
      query_params[:'tracking_origin_country'] = opts[:'tracking_origin_country'] if !opts[:'tracking_origin_country'].nil?
      query_params[:'tracking_destination_country'] = opts[:'tracking_destination_country'] if !opts[:'tracking_destination_country'].nil?
      query_params[:'tracking_key'] = opts[:'tracking_key'] if !opts[:'tracking_key'].nil?
      query_params[:'tracking_postal_code'] = opts[:'tracking_postal_code'] if !opts[:'tracking_postal_code'].nil?
      query_params[:'tracking_ship_date'] = opts[:'tracking_ship_date'] if !opts[:'tracking_ship_date'].nil?
      query_params[:'tracking_state'] = opts[:'tracking_state'] if !opts[:'tracking_state'].nil?
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'PartialUpdateTracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.retrack_tracking_by_slug_tracking_number",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#retrack_tracking_by_slug_tracking_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # update_tracking_by_id
    # Update a tracking.
    # @param id [String] tracking ID

    # @param body [Model::TrackingUpdateTrackingByIdRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Model::Tracking] 
    def update_tracking_by_id(id:, body:,opts: {})
      if "tracking" != ""
        body = {:'tracking' => body}
      end
      opts[:body] = body
      data, _status_code, _headers = update_tracking_by_id_with_http_info(id:id, opts: opts)
      data
    end

    def update_tracking_by_id_with_http_info(id:, opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.update_tracking_by_id ...'
      end

      if id.nil? or id.to_s == ''
        raise InvalidParamError.new "id cannot be nil or empty"
      end


      # resource path
      local_var_path = "/tracking/2024-04/trackings/#{id}" 
      method = :'PUT'

      # query parameters
      query_params = opts[:query_params] || {}
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'Tracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.update_tracking_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#update_tracking_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 

    # update_tracking_by_slug_tracking_number
    # Update a tracking.
    # @param slug [String] Tracking slug
    # @param tracking_number [String] Tracking number

    # @param body [Model::TrackingUpdateTrackingBySlugTrackingNumberRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tracking_account_number Additional field required by some carriers to retrieve the tracking info. The shipper’s carrier account number. Refer to our article on  for more details.
    # @option opts [String] :tracking_origin_country Additional field required by some carriers to retrieve the tracking info. The origin country/region of the shipment. Refer to our article on  for more details.
    # @option opts [String] :tracking_destination_country Additional field required by some carriers to retrieve the tracking info. The destination country/region of the shipment. Refer to our article on  for more details.
    # @option opts [String] :tracking_key Additional field required by some carriers to retrieve the tracking info. A type of tracking credential required by some carriers. Refer to our article on  for more details.
    # @option opts [String] :tracking_postal_code Additional field required by some carriers to retrieve the tracking info. The postal code of the recipient’s address. Refer to our article on  for more details.
    # @option opts [String] :tracking_ship_date Additional field required by some carriers to retrieve the tracking info. The date the shipment was sent, using the format YYYYMMDD. Refer to our article on  for more details.
    # @option opts [String] :tracking_state Additional field required by some carriers to retrieve the tracking info. The state/province of the recipient’s address. Refer to our article on  for more details.
    # @return [Model::Tracking] 
    def update_tracking_by_slug_tracking_number(slug:, tracking_number:, body:,opts: {})
      if "tracking" != ""
        body = {:'tracking' => body}
      end
      opts[:body] = body
      data, _status_code, _headers = update_tracking_by_slug_tracking_number_with_http_info(slug:slug, tracking_number:tracking_number, opts: opts)
      data
    end

    def update_tracking_by_slug_tracking_number_with_http_info(slug:, tracking_number:, opts: {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingApi.update_tracking_by_slug_tracking_number ...'
      end

      if slug.nil? or slug.to_s == ''
        raise InvalidParamError.new "slug cannot be nil or empty"
      end
      if tracking_number.nil? or tracking_number.to_s == ''
        raise InvalidParamError.new "tracking_number cannot be nil or empty"
      end


      # resource path
      local_var_path = "/tracking/2024-04/trackings/#{slug}/#{tracking_number}" 
      method = :'PUT'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tracking_account_number'] = opts[:'tracking_account_number'] if !opts[:'tracking_account_number'].nil?
      query_params[:'tracking_origin_country'] = opts[:'tracking_origin_country'] if !opts[:'tracking_origin_country'].nil?
      query_params[:'tracking_destination_country'] = opts[:'tracking_destination_country'] if !opts[:'tracking_destination_country'].nil?
      query_params[:'tracking_key'] = opts[:'tracking_key'] if !opts[:'tracking_key'].nil?
      query_params[:'tracking_postal_code'] = opts[:'tracking_postal_code'] if !opts[:'tracking_postal_code'].nil?
      query_params[:'tracking_ship_date'] = opts[:'tracking_ship_date'] if !opts[:'tracking_ship_date'].nil?
      query_params[:'tracking_state'] = opts[:'tracking_state'] if !opts[:'tracking_state'].nil?
      # header parameters
      header_params = opts[:header_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = 'Tracking'
      
      new_options = opts.merge(
        :operation => :"TrackingApi.update_tracking_by_slug_tracking_number",
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :response_legacy_tag => "tracking",
        :is_paging => false
      )

      data, status_code, headers = @api_client.call_api(method, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#update_tracking_by_slug_tracking_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end 
  end
end