# This code was auto generated by AfterShip SDK Generator.
# Do not edit the class manually.
module AftershipAPI::Model
  class UpdateTrackingByIdResponse

    # Tracking ID.
    # id?: String;
    attr_accessor :id

    # The length of the tracking ID has been increased from 24 characters to 32 characters. We will use the legacy_id field to store the original 24-character tracking ID to maintain compatibility with existing data. Therefore, all tracking endpoints will continue to work with the legacy_id field as before.
    # legacy_id?: String;
    attr_accessor :legacy_id

    # The date and time the shipment was imported or added to AfterShip. It uses the format `YYYY-MM-DDTHH:mm:ssZ` for the timezone GMT +0.
    # created_at?: String;
    attr_accessor :created_at

    # The date and time the shipment was updated. It uses the format `YYYY-MM-DDTHH:mm:ssZ` for the timezone GMT +0.
    # updated_at?: String;
    attr_accessor :updated_at

    # Tracking number.
    # tracking_number?: String;
    attr_accessor :tracking_number

    # Unique courier code. When importing a shipment with no courier slug and the tracking number can’t be recognized, the courier will be marked as `unrecognized`. Get courier codes .
    # slug?: String;
    attr_accessor :slug

    # Whether or not AfterShip will continue tracking the shipments. Value is `false` when tag (status) is `Delivered`, `Expired`, or further updates for 30 days since last update.
    # active?: Boolean;
    attr_accessor :active

    # Custom fields that accept an object with string field. In order to protect the privacy of your customers, do not include any  in custom fields.
    # custom_fields?: Object;
    attr_accessor :custom_fields

    # Total transit time in days.- For delivered shipments: Transit time (in days) = Delivered date - Pick-up date- For undelivered shipments: Transit time (in days) = Current date - Pick-up dateValue as `null` for the shipment without pick-up date.
    # transit_time?: Integer;
    attr_accessor :transit_time

    # The  for the origin country/region. E.g. USA for the United States.
    # origin_country_region?: String;
    attr_accessor :origin_country_region

    # The state of the sender’s address.
    # origin_state?: String;
    attr_accessor :origin_state

    # The city of the sender’s address.
    # origin_city?: String;
    attr_accessor :origin_city

    # The postal code of the sender’s address.
    # origin_postal_code?: String;
    attr_accessor :origin_postal_code

    # The sender address that the shipment is shipping from.
    # origin_raw_location?: String;
    attr_accessor :origin_raw_location

    # The  for the destination country/region. E.g. USA for the United States.
    # destination_country_region?: String;
    attr_accessor :destination_country_region

    # The state of the recipient’s address.
    # destination_state?: String;
    attr_accessor :destination_state

    # The city of the recipient’s address.
    # destination_city?: String;
    attr_accessor :destination_city

    # The postal code of the recipient’s address.
    # destination_postal_code?: String;
    attr_accessor :destination_postal_code

    # The shipping address that the shipment is shipping to.
    # destination_raw_location?: String;
    attr_accessor :destination_raw_location

    # Destination country/region of the tracking detected from the courier. ISO Alpha-3 (three letters). Value will be `null` if the courier doesn't provide the destination country.
    # courier_destination_country_region?: String;
    attr_accessor :courier_destination_country_region

    # The field contains the estimated delivery date provided by the carrier.
    # courier_estimated_delivery_date?: CourierEstimatedDeliveryDateUpdateTrackingByIdResponse;
    attr_accessor :courier_estimated_delivery_date

    # Text field for the note.
    # note?: String;
    attr_accessor :note

    # A globally-unique identifier for the order.
    # order_id?: String;
    attr_accessor :order_id

    # The URL for the order in your system or store.
    # order_id_path?: String;
    attr_accessor :order_id_path

    # The date and time the order was created in your system or store. It uses the format: `YYYY-MM-DDTHH:mm:ssZ` based on whichever timezone you provide.
    # order_date?: String;
    attr_accessor :order_date

    # Number of packages under the tracking.
    # shipment_package_count?: Float;
    attr_accessor :shipment_package_count

    # The date and time the shipment was picked up by the carrier. It uses the timezone where the pickup occured. The format may differ depending on how the carrier provides it:- YYYY-MM-DD- YYYY-MM-DDTHH:mm:ss- YYYY-MM-DDTHH:mm:ssZ
    # shipment_pickup_date?: String;
    attr_accessor :shipment_pickup_date

    # The date and time the shipment was delivered. It uses the shipment recipient’s timezone. The format may differ depending on how the carrier provides it:- YYYY-MM-DD- YYYY-MM-DDTHH:mm:ss- YYYY-MM-DDTHH:mm:ssZ
    # shipment_delivery_date?: String;
    attr_accessor :shipment_delivery_date

    # The carrier service type for the shipment.
    # shipment_type?: String;
    attr_accessor :shipment_type

    # The shipment_weight field represents the total weight of the shipment. In scenarios where the carrier does not provide this information, you can provide the weight to AfterShip. We will prioritize the data provided by the carrier, if available. The shipment weight will be included in the Response and accessed through the GET API, Webhook, and CSV export. It will also be displayed on the AfterShip Tracking admin. Additionally, it plays a significant role in error-free shipment handling and carbon emission calculations, ensuring accurate and informed decision-making
    # shipment_weight?: ShipmentWeightUpdateTrackingByIdResponse;
    attr_accessor :shipment_weight

    # Signed by information for delivered shipment.
    # signed_by?: String;
    attr_accessor :signed_by

    # Source of how this tracking is added.
    # source?: String;
    attr_accessor :source

    # Current status of tracking. (
    # tag?: TagV1;
    attr_accessor :tag

    # Current subtag of tracking. (
    # subtag?: String;
    attr_accessor :subtag

    # Normalized tracking message. (
    # subtag_message?: String;
    attr_accessor :subtag_message

    # By default this field shows the `tracking_number`, but you can customize it as you wish with any info (e.g. the order number).
    # title?: String;
    attr_accessor :title

    # Number of attempts AfterShip tracks at courier's system.
    # tracked_count?: Float;
    attr_accessor :tracked_count

    # Indicates if the shipment is trackable till the final destination.Three possible values:- true- false- null
    # last_mile_tracking_supported?: Boolean;
    attr_accessor :last_mile_tracking_supported

    # The recipient’s language. If you set up AfterShip notifications in different languages, we use this to send the recipient tracking updates in their preferred language.
    # language?: String;
    attr_accessor :language

    # Deprecated
    # unique_token?: String;
    attr_accessor :unique_token

    # Array of checkpoint object describes the checkpoint information.
    # checkpoints?: Checkpoint[];
    attr_accessor :checkpoints

    # Phone number(s) subscribed to receive sms notifications.
    # subscribed_smses?: String[];
    attr_accessor :subscribed_smses

    # Email address(es) subscribed to receive email notifications.
    # subscribed_emails?: String[];
    attr_accessor :subscribed_emails

    # Whether or not the shipment is returned to sender. Value is `true` when any of its checkpoints has subtag `Exception_010` (returning to sender) or `Exception_011` (returned to sender). Otherwise value is `false`.
    # return_to_sender?: Boolean;
    attr_accessor :return_to_sender

    # The promised delivery date of the order. It uses the formats:- YYYY-MM-DD- YYYY-MM-DDTHH:mm:ss- YYYY-MM-DDTHH:mm:ssZ
    # order_promised_delivery_date?: String;
    attr_accessor :order_promised_delivery_date

    # Shipment delivery type- pickup_at_store- pickup_at_courier- door_to_door
    # delivery_type?: String;
    attr_accessor :delivery_type

    # Shipment pickup location for receiver
    # pickup_location?: String;
    attr_accessor :pickup_location

    # Shipment pickup note for receiver
    # pickup_note?: String;
    attr_accessor :pickup_note

    # Official tracking URL of the courier (if any). The language parameter of this link relies on the destination country/region and the language associated with the shipment, if the data regarding the destination country/region and language of the shipment is not available, AfterShip will set the language parameter of the link to "US" by default.
    # courier_tracking_link?: String;
    attr_accessor :courier_tracking_link

    # The date and time of the carrier’s first attempt to deliver the package to the recipient.  It uses the shipment recipient’s timezone. The format may differ depending on how the carrier provides it:- YYYY-MM-DDTHH:mm:ss- YYYY-MM-DDTHH:mm:ssZ
    # first_attempted_at?: String;
    attr_accessor :first_attempted_at

    # Delivery instructions (delivery date or address) can be modified by visiting the link if supported by a carrier. The language parameter of this link relies on the destination country/region and the language associated with the shipment, if the data regarding the destination country/region and language of the shipment is not available, AfterShip will set the language parameter of the link to "US" by default.
    # courier_redirect_link?: String;
    attr_accessor :courier_redirect_link

    # Additional field required by some carriers to retrieve the tracking info. The shipper’s carrier account number. Refer to our article on  for more details.
    # tracking_account_number?: String;
    attr_accessor :tracking_account_number

    # Additional field required by some carriers to retrieve the tracking info. A type of tracking credential required by some carriers. Refer to our article on  for more details.
    # tracking_key?: String;
    attr_accessor :tracking_key

    # The date and time when the shipment is shipped by the merchant and ready for pickup by the carrier. The field supports the following formats:- YYYY-MM-DD- YYYY-MM-DDTHH:mm:ss- YYYY-MM-DDTHH:mm:ssZThe field serves two key purposes:- Calculate processing time metrics in the Order-to-delivery Analytics dashboard. To ensure accurate analytics, it's recommended to include timezone information when configuring this value- Required by certain carriers to retrieve tracking information as an additional tracking field.
    # tracking_ship_date?: String;
    attr_accessor :tracking_ship_date

    # Whether the tracking is delivered on time or not.
    # on_time_status?: String;
    attr_accessor :on_time_status

    # The difference days of the on time.
    # on_time_difference?: Float;
    attr_accessor :on_time_difference

    # The tags of the order.
    # order_tags?: String[];
    attr_accessor :order_tags

    # The estimated delivery date of the shipment provided by AfterShip’s AI and shown to the recipients. It uses the format `YYYY-MM-DD` based on the shipment recipient’s timezone.
    # aftership_estimated_delivery_date?: AftershipEstimatedDeliveryDateUpdateTrackingByIdResponse;
    attr_accessor :aftership_estimated_delivery_date

    # Estimated delivery time of the shipment based on your . It uses the format `YYYY-MM-DD` based on the shipment recipient’s timezone.
    # custom_estimated_delivery_date?: CustomEstimatedDeliveryDateUpdateTrackingByIdResponse;
    attr_accessor :custom_estimated_delivery_date

    # A unique, human-readable identifier for the order.
    # order_number?: String;
    attr_accessor :order_number

    # The shipment’s original estimated delivery date. It could be provided by the carrier, AfterShip AI, or based on your custom settings. The format of carrier EDDs may differ depending on how the carrier provides it:- YYYY-MM-DD- YYYY-MM-DDTHH:mm:ss- YYYY-MM-DDTHH:mm:ssZ AfterShip AI and custom EDDs always use the format `YYYY-MM-DD`. All EDDs use the shipment recipient’s timezone.
    # first_estimated_delivery?: FirstEstimatedDeliveryUpdateTrackingByIdResponse;
    attr_accessor :first_estimated_delivery

    # The most recently calculated estimated delivery date. It could be provided by the carrier, AfterShip AI, or based on your custom settings. The format of carrier EDDs may differ depending on how the carrier provides it:- YYYY-MM-DD- YYYY-MM-DDTHH:mm:ss- YYYY-MM-DDTHH:mm:ssZ AfterShip AI and custom EDDs always use the format `YYYY-MM-DD`. All EDDs use the shipment recipient’s timezone.
    # latest_estimated_delivery?: LatestEstimatedDeliveryUpdateTrackingByIdResponse;
    attr_accessor :latest_estimated_delivery

    # Used to add tags to your shipments to help categorize and filter them easily.
    # shipment_tags?: String[];
    attr_accessor :shipment_tags

    # If you have multiple accounts connected for a single carrier on AfterShip, we have introduced the courier_connection_id field to allow you to specify the carrier account associated with each shipment. By providing this information, you enable us to accurately track and monitor your shipments based on the correct carrier account.(</br>In the event that you do not specify the courier_connection_id, we will handle your shipment using the connection that was created earliest among your connected accounts.
    # courier_connection_id?: String;
    attr_accessor :courier_connection_id

    # (Legacy) Replaced by `origin_country_region`. Additional field required by some carriers to retrieve the tracking info. The origin country/region of the shipment. Refer to our article on  for more details.
    # tracking_origin_country_region?: String;
    attr_accessor :tracking_origin_country_region

    # (Legacy) Replaced by `destination_country_region`. Additional field required by some carriers to retrieve the tracking info. The destination country/region of the shipment. Refer to our article on  for more details.
    # tracking_destination_country_region?: String;
    attr_accessor :tracking_destination_country_region

    # (Legacy) Replaced by `destination_postal_code`. Additional field required by some carriers to retrieve the tracking info. The postal code of the recipient’s address. Refer to our article on  for more details.
    # tracking_postal_code?: String;
    attr_accessor :tracking_postal_code

    # (Legacy) Replaced by `destination_state`. Additional field required by some carriers to retrieve the tracking info. The state/province of the recipient’s address. Refer to our article on  for more details.
    # tracking_state?: String;
    attr_accessor :tracking_state

    # The model contains the total amount of carbon emissions generated by the shipment. - AfterShip will provide this data only when it is available, and its availability is contingent upon the location and weight information that AfterShip can obtain.- The values will be accessible solely for shipments that have been successfully delivered. However, in the event of a shipping update after the delivery status has been achieved, the value may change.- It’s a paid service and only for Tracking Enterprise users, please contact your customer success manager if you want to know more.
    # carbon_emissions?: CarbonEmissionsUpdateTrackingByIdResponse;
    attr_accessor :carbon_emissions

    # The location_id refers to the place where you fulfilled the items.  - If you provide a location_id, the system will automatically use it as the tracking's origin address. However, passing both location_id and any origin address information simultaneously is not allowed.- Please make sure you add your locations .
    # location_id?: String;
    attr_accessor :location_id

    # The shipping_method string refers to the chosen method for delivering the package. Merchants typically offer various shipping methods to consumers during the checkout process, such as, Local Delivery, Free Express Worldwide Shipping, etc.
    # shipping_method?: String;
    attr_accessor :shipping_method

    # By dynamically tracking failed delivery attempts during shipment, this field allows you to pinpoint carriers accountable for the most failures. Analyzing the root cause of these failures enables you to improve carriers' delivery standard operating procedures (SOP), leading to an overall enhancement in delivery service quality.
    # failed_delivery_attempts?: Integer;
    attr_accessor :failed_delivery_attempts

    # The signature_requirement field serves the purpose of validating the service option type, specifically proof of delivery. By collecting the recipient's signature upon delivery, it ensures the package reaches the intended recipient and prevents disputes related to non-delivery or lost packages.</br>
    # signature_requirement?: String;
    attr_accessor :signature_requirement

    # The delivery location type represents the secure area where the carrier leaves the package, such as a safe place, locker, mailbox, front porch, etc. This information helps ensure the shipment reaches the intended recipient efficiently, minimizing the risk of theft or damage.
    # delivery_location_type?: String;
    attr_accessor :delivery_location_type

    # The tracking URL directs your customers to the shipment tracking page which can display either the default or a customized page based on segmentation rules.- The universal URL is used by default, but you can opt for a custom domain if you have one. Learn how to set up a custom domain .The field is not automatically enabled in API & Webhook. Please contact support if you’d like to enable it.
    # aftership_tracking_url?: String;
    attr_accessor :aftership_tracking_url

    # The order URL directs your customers to the order tracking page, which includes all shipments. It can display either the default or a customized page based on segmentation rules.- The universal URL is used by default, but you can opt for a custom domain if you have one. Learn how to set up a custom domain .The field is not automatically enabled in API & Webhook. Please contact support if you’d like to enable it.
    # aftership_tracking_order_url?: String;
    attr_accessor :aftership_tracking_order_url

    # The field contains information about the first leg of the shipping starting from the carrier picking up the shipment from the shipper to the point where they hand it over to the last-mile carrier. Once AfterShip detects the shipment is multi-leg, we will populate the first-mile information under this object. 
    # first_mile?: FirstMileUpdateTrackingByIdResponse;
    attr_accessor :first_mile

    # This field contains information about the last leg of the shipment, starting from the carrier who hands it over to the last-mile carrier, all the way to delivery. Once AfterShip detects that the shipment involves multiple legs and identifies the last-mile carrier, we will populate the last-mile carrier information in this object. Alternatively, the user can provide this information in this field to specify the last-mile carrier, which is helpful if AfterShip is unable to detect it automatically.
    # last_mile?: LastMileUpdateTrackingByIdResponse;
    attr_accessor :last_mile

    # The field contains the customer information associated with the tracking. A maximum of three customer objects are allowed.
    # customers?: CustomersUpdateTrackingByIdResponse[];
    attr_accessor :customers

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `AftershipAPI::UpdateTrackingByIdResponse` initialize method"
      end

      attributes = attributes.each_with_object({}) { |(k, v), h|
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end 

      if attributes.key?(:'legacy_id')
        self.legacy_id = attributes[:'legacy_id']
      end 

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end 

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end 

      if attributes.key?(:'tracking_number')
        self.tracking_number = attributes[:'tracking_number']
      end 

      if attributes.key?(:'slug')
        self.slug = attributes[:'slug']
      end 

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end 

      if attributes.key?(:'custom_fields')
        self.custom_fields = attributes[:'custom_fields']
      end 

      if attributes.key?(:'transit_time')
        self.transit_time = attributes[:'transit_time']
      end 

      if attributes.key?(:'origin_country_region')
        self.origin_country_region = attributes[:'origin_country_region']
      end 

      if attributes.key?(:'origin_state')
        self.origin_state = attributes[:'origin_state']
      end 

      if attributes.key?(:'origin_city')
        self.origin_city = attributes[:'origin_city']
      end 

      if attributes.key?(:'origin_postal_code')
        self.origin_postal_code = attributes[:'origin_postal_code']
      end 

      if attributes.key?(:'origin_raw_location')
        self.origin_raw_location = attributes[:'origin_raw_location']
      end 

      if attributes.key?(:'destination_country_region')
        self.destination_country_region = attributes[:'destination_country_region']
      end 

      if attributes.key?(:'destination_state')
        self.destination_state = attributes[:'destination_state']
      end 

      if attributes.key?(:'destination_city')
        self.destination_city = attributes[:'destination_city']
      end 

      if attributes.key?(:'destination_postal_code')
        self.destination_postal_code = attributes[:'destination_postal_code']
      end 

      if attributes.key?(:'destination_raw_location')
        self.destination_raw_location = attributes[:'destination_raw_location']
      end 

      if attributes.key?(:'courier_destination_country_region')
        self.courier_destination_country_region = attributes[:'courier_destination_country_region']
      end 

      if attributes.key?(:'courier_estimated_delivery_date')
        self.courier_estimated_delivery_date = attributes[:'courier_estimated_delivery_date']
      end 

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end 

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end 

      if attributes.key?(:'order_id_path')
        self.order_id_path = attributes[:'order_id_path']
      end 

      if attributes.key?(:'order_date')
        self.order_date = attributes[:'order_date']
      end 

      if attributes.key?(:'shipment_package_count')
        self.shipment_package_count = attributes[:'shipment_package_count']
      end 

      if attributes.key?(:'shipment_pickup_date')
        self.shipment_pickup_date = attributes[:'shipment_pickup_date']
      end 

      if attributes.key?(:'shipment_delivery_date')
        self.shipment_delivery_date = attributes[:'shipment_delivery_date']
      end 

      if attributes.key?(:'shipment_type')
        self.shipment_type = attributes[:'shipment_type']
      end 

      if attributes.key?(:'shipment_weight')
        self.shipment_weight = attributes[:'shipment_weight']
      end 

      if attributes.key?(:'signed_by')
        self.signed_by = attributes[:'signed_by']
      end 

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end 

      if attributes.key?(:'tag')
        self.tag = attributes[:'tag']
      end 

      if attributes.key?(:'subtag')
        self.subtag = attributes[:'subtag']
      end 

      if attributes.key?(:'subtag_message')
        self.subtag_message = attributes[:'subtag_message']
      end 

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end 

      if attributes.key?(:'tracked_count')
        self.tracked_count = attributes[:'tracked_count']
      end 

      if attributes.key?(:'last_mile_tracking_supported')
        self.last_mile_tracking_supported = attributes[:'last_mile_tracking_supported']
      end 

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end 

      if attributes.key?(:'unique_token')
        self.unique_token = attributes[:'unique_token']
      end 

      if attributes.key?(:'checkpoints')
        self.checkpoints = attributes[:'checkpoints']
      end 

      if attributes.key?(:'subscribed_smses')
        self.subscribed_smses = attributes[:'subscribed_smses']
      end 

      if attributes.key?(:'subscribed_emails')
        self.subscribed_emails = attributes[:'subscribed_emails']
      end 

      if attributes.key?(:'return_to_sender')
        self.return_to_sender = attributes[:'return_to_sender']
      end 

      if attributes.key?(:'order_promised_delivery_date')
        self.order_promised_delivery_date = attributes[:'order_promised_delivery_date']
      end 

      if attributes.key?(:'delivery_type')
        self.delivery_type = attributes[:'delivery_type']
      end 

      if attributes.key?(:'pickup_location')
        self.pickup_location = attributes[:'pickup_location']
      end 

      if attributes.key?(:'pickup_note')
        self.pickup_note = attributes[:'pickup_note']
      end 

      if attributes.key?(:'courier_tracking_link')
        self.courier_tracking_link = attributes[:'courier_tracking_link']
      end 

      if attributes.key?(:'first_attempted_at')
        self.first_attempted_at = attributes[:'first_attempted_at']
      end 

      if attributes.key?(:'courier_redirect_link')
        self.courier_redirect_link = attributes[:'courier_redirect_link']
      end 

      if attributes.key?(:'tracking_account_number')
        self.tracking_account_number = attributes[:'tracking_account_number']
      end 

      if attributes.key?(:'tracking_key')
        self.tracking_key = attributes[:'tracking_key']
      end 

      if attributes.key?(:'tracking_ship_date')
        self.tracking_ship_date = attributes[:'tracking_ship_date']
      end 

      if attributes.key?(:'on_time_status')
        self.on_time_status = attributes[:'on_time_status']
      end 

      if attributes.key?(:'on_time_difference')
        self.on_time_difference = attributes[:'on_time_difference']
      end 

      if attributes.key?(:'order_tags')
        self.order_tags = attributes[:'order_tags']
      end 

      if attributes.key?(:'aftership_estimated_delivery_date')
        self.aftership_estimated_delivery_date = attributes[:'aftership_estimated_delivery_date']
      end 

      if attributes.key?(:'custom_estimated_delivery_date')
        self.custom_estimated_delivery_date = attributes[:'custom_estimated_delivery_date']
      end 

      if attributes.key?(:'order_number')
        self.order_number = attributes[:'order_number']
      end 

      if attributes.key?(:'first_estimated_delivery')
        self.first_estimated_delivery = attributes[:'first_estimated_delivery']
      end 

      if attributes.key?(:'latest_estimated_delivery')
        self.latest_estimated_delivery = attributes[:'latest_estimated_delivery']
      end 

      if attributes.key?(:'shipment_tags')
        self.shipment_tags = attributes[:'shipment_tags']
      end 

      if attributes.key?(:'courier_connection_id')
        self.courier_connection_id = attributes[:'courier_connection_id']
      end 

      if attributes.key?(:'tracking_origin_country_region')
        self.tracking_origin_country_region = attributes[:'tracking_origin_country_region']
      end 

      if attributes.key?(:'tracking_destination_country_region')
        self.tracking_destination_country_region = attributes[:'tracking_destination_country_region']
      end 

      if attributes.key?(:'tracking_postal_code')
        self.tracking_postal_code = attributes[:'tracking_postal_code']
      end 

      if attributes.key?(:'tracking_state')
        self.tracking_state = attributes[:'tracking_state']
      end 

      if attributes.key?(:'carbon_emissions')
        self.carbon_emissions = attributes[:'carbon_emissions']
      end 

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end 

      if attributes.key?(:'shipping_method')
        self.shipping_method = attributes[:'shipping_method']
      end 

      if attributes.key?(:'failed_delivery_attempts')
        self.failed_delivery_attempts = attributes[:'failed_delivery_attempts']
      end 

      if attributes.key?(:'signature_requirement')
        self.signature_requirement = attributes[:'signature_requirement']
      end 

      if attributes.key?(:'delivery_location_type')
        self.delivery_location_type = attributes[:'delivery_location_type']
      end 

      if attributes.key?(:'aftership_tracking_url')
        self.aftership_tracking_url = attributes[:'aftership_tracking_url']
      end 

      if attributes.key?(:'aftership_tracking_order_url')
        self.aftership_tracking_order_url = attributes[:'aftership_tracking_order_url']
      end 

      if attributes.key?(:'first_mile')
        self.first_mile = attributes[:'first_mile']
      end 

      if attributes.key?(:'last_mile')
        self.last_mile = attributes[:'last_mile']
      end 

      if attributes.key?(:'customers')
        self.customers = attributes[:'customers']
      end 
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'legacy_id' => :'String',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'tracking_number' => :'String',
        :'slug' => :'String',
        :'active' => :'Boolean',
        :'custom_fields' => :'Object',
        :'transit_time' => :'Integer',
        :'origin_country_region' => :'String',
        :'origin_state' => :'String',
        :'origin_city' => :'String',
        :'origin_postal_code' => :'String',
        :'origin_raw_location' => :'String',
        :'destination_country_region' => :'String',
        :'destination_state' => :'String',
        :'destination_city' => :'String',
        :'destination_postal_code' => :'String',
        :'destination_raw_location' => :'String',
        :'courier_destination_country_region' => :'String',
        :'courier_estimated_delivery_date' => :'CourierEstimatedDeliveryDateUpdateTrackingByIdResponse',
        :'note' => :'String',
        :'order_id' => :'String',
        :'order_id_path' => :'String',
        :'order_date' => :'String',
        :'shipment_package_count' => :'Float',
        :'shipment_pickup_date' => :'String',
        :'shipment_delivery_date' => :'String',
        :'shipment_type' => :'String',
        :'shipment_weight' => :'ShipmentWeightUpdateTrackingByIdResponse',
        :'signed_by' => :'String',
        :'source' => :'String',
        :'tag' => :'TagV1',
        :'subtag' => :'String',
        :'subtag_message' => :'String',
        :'title' => :'String',
        :'tracked_count' => :'Float',
        :'last_mile_tracking_supported' => :'Boolean',
        :'language' => :'String',
        :'unique_token' => :'String',
        :'checkpoints' => :'Array<Checkpoint>',
        :'subscribed_smses' => :'Array<String>',
        :'subscribed_emails' => :'Array<String>',
        :'return_to_sender' => :'Boolean',
        :'order_promised_delivery_date' => :'String',
        :'delivery_type' => :'String',
        :'pickup_location' => :'String',
        :'pickup_note' => :'String',
        :'courier_tracking_link' => :'String',
        :'first_attempted_at' => :'String',
        :'courier_redirect_link' => :'String',
        :'tracking_account_number' => :'String',
        :'tracking_key' => :'String',
        :'tracking_ship_date' => :'String',
        :'on_time_status' => :'String',
        :'on_time_difference' => :'Float',
        :'order_tags' => :'Array<String>',
        :'aftership_estimated_delivery_date' => :'AftershipEstimatedDeliveryDateUpdateTrackingByIdResponse',
        :'custom_estimated_delivery_date' => :'CustomEstimatedDeliveryDateUpdateTrackingByIdResponse',
        :'order_number' => :'String',
        :'first_estimated_delivery' => :'FirstEstimatedDeliveryUpdateTrackingByIdResponse',
        :'latest_estimated_delivery' => :'LatestEstimatedDeliveryUpdateTrackingByIdResponse',
        :'shipment_tags' => :'Array<String>',
        :'courier_connection_id' => :'String',
        :'tracking_origin_country_region' => :'String',
        :'tracking_destination_country_region' => :'String',
        :'tracking_postal_code' => :'String',
        :'tracking_state' => :'String',
        :'carbon_emissions' => :'CarbonEmissionsUpdateTrackingByIdResponse',
        :'location_id' => :'String',
        :'shipping_method' => :'String',
        :'failed_delivery_attempts' => :'Integer',
        :'signature_requirement' => :'String',
        :'delivery_location_type' => :'String',
        :'aftership_tracking_url' => :'String',
        :'aftership_tracking_order_url' => :'String',
        :'first_mile' => :'FirstMileUpdateTrackingByIdResponse',
        :'last_mile' => :'LastMileUpdateTrackingByIdResponse',
        :'customers' => :'Array<CustomersUpdateTrackingByIdResponse>',
      }
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'legacy_id' => :'legacy_id',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'tracking_number' => :'tracking_number',
        :'slug' => :'slug',
        :'active' => :'active',
        :'custom_fields' => :'custom_fields',
        :'transit_time' => :'transit_time',
        :'origin_country_region' => :'origin_country_region',
        :'origin_state' => :'origin_state',
        :'origin_city' => :'origin_city',
        :'origin_postal_code' => :'origin_postal_code',
        :'origin_raw_location' => :'origin_raw_location',
        :'destination_country_region' => :'destination_country_region',
        :'destination_state' => :'destination_state',
        :'destination_city' => :'destination_city',
        :'destination_postal_code' => :'destination_postal_code',
        :'destination_raw_location' => :'destination_raw_location',
        :'courier_destination_country_region' => :'courier_destination_country_region',
        :'courier_estimated_delivery_date' => :'courier_estimated_delivery_date',
        :'note' => :'note',
        :'order_id' => :'order_id',
        :'order_id_path' => :'order_id_path',
        :'order_date' => :'order_date',
        :'shipment_package_count' => :'shipment_package_count',
        :'shipment_pickup_date' => :'shipment_pickup_date',
        :'shipment_delivery_date' => :'shipment_delivery_date',
        :'shipment_type' => :'shipment_type',
        :'shipment_weight' => :'shipment_weight',
        :'signed_by' => :'signed_by',
        :'source' => :'source',
        :'tag' => :'tag',
        :'subtag' => :'subtag',
        :'subtag_message' => :'subtag_message',
        :'title' => :'title',
        :'tracked_count' => :'tracked_count',
        :'last_mile_tracking_supported' => :'last_mile_tracking_supported',
        :'language' => :'language',
        :'unique_token' => :'unique_token',
        :'checkpoints' => :'checkpoints',
        :'subscribed_smses' => :'subscribed_smses',
        :'subscribed_emails' => :'subscribed_emails',
        :'return_to_sender' => :'return_to_sender',
        :'order_promised_delivery_date' => :'order_promised_delivery_date',
        :'delivery_type' => :'delivery_type',
        :'pickup_location' => :'pickup_location',
        :'pickup_note' => :'pickup_note',
        :'courier_tracking_link' => :'courier_tracking_link',
        :'first_attempted_at' => :'first_attempted_at',
        :'courier_redirect_link' => :'courier_redirect_link',
        :'tracking_account_number' => :'tracking_account_number',
        :'tracking_key' => :'tracking_key',
        :'tracking_ship_date' => :'tracking_ship_date',
        :'on_time_status' => :'on_time_status',
        :'on_time_difference' => :'on_time_difference',
        :'order_tags' => :'order_tags',
        :'aftership_estimated_delivery_date' => :'aftership_estimated_delivery_date',
        :'custom_estimated_delivery_date' => :'custom_estimated_delivery_date',
        :'order_number' => :'order_number',
        :'first_estimated_delivery' => :'first_estimated_delivery',
        :'latest_estimated_delivery' => :'latest_estimated_delivery',
        :'shipment_tags' => :'shipment_tags',
        :'courier_connection_id' => :'courier_connection_id',
        :'tracking_origin_country_region' => :'tracking_origin_country_region',
        :'tracking_destination_country_region' => :'tracking_destination_country_region',
        :'tracking_postal_code' => :'tracking_postal_code',
        :'tracking_state' => :'tracking_state',
        :'carbon_emissions' => :'carbon_emissions',
        :'location_id' => :'location_id',
        :'shipping_method' => :'shipping_method',
        :'failed_delivery_attempts' => :'failed_delivery_attempts',
        :'signature_requirement' => :'signature_requirement',
        :'delivery_location_type' => :'delivery_location_type',
        :'aftership_tracking_url' => :'aftership_tracking_url',
        :'aftership_tracking_order_url' => :'aftership_tracking_order_url',
        :'first_mile' => :'first_mile',
        :'last_mile' => :'last_mile',
        :'customers' => :'customers',
      }
    end

    # Builds the object from hash
    # @param attributes [Hash] Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(key) && attributes[key].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[key].is_a?(Array)
            transformed_hash["#{key}"] = attributes[key].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[key].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[key])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param type [String] Data type
    # @param value [String] Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        klass = AftershipAPI::Model.const_get(type)
        klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param value [Object] Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

    def to_json(*a)
      to_hash.to_json(*a)
    end
  end
end

