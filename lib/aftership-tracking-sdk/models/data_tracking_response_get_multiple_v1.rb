# This code was auto generated by AfterShip SDK Generator.
# Do not edit the class manually.
module AftershipAPI::Model
  class DataTrackingResponseGetMultipleV1

    # Page to show. (Default: 1)
    # page?: Integer;
    attr_accessor :page

    # Number of trackings each page contain. (Default: 100, Max: 200)
    # limit?: Integer;
    attr_accessor :limit

    # Number of returned trackings
    # count?: Integer;
    attr_accessor :count

    # Search the content of the tracking record fields: `tracking_number`, `title`, `order_id`, `customer_name`, `custom_fields`, `order_id`, `emails`, `smses`
    # keyword?: String;
    attr_accessor :keyword

    # Unique 
    # slug?: String;
    attr_accessor :slug

    # Origin country/region of trackings. Use 
    # origin?: String[];
    attr_accessor :origin

    # Destination country/region of trackings. Use 
    # destination?: String[];
    attr_accessor :destination

    # Current status of tracking. (
    # tag?: TagV1;
    attr_accessor :tag

    # Start date and time of trackings created. AfterShip only stores data of 120 days.
    # created_at_min?: String;
    attr_accessor :created_at_min

    # End date and time of trackings created.
    # created_at_max?: String;
    attr_accessor :created_at_max

    # Date and time the tracking was last updated
    # last_updated_at?: String;
    attr_accessor :last_updated_at

    # Whether or not the shipment is returned to sender. Value is `true` when any of its checkpoints has subtag `Exception_010` (returning to sender) or `Exception_011` (returned to sender). Otherwise value is `false`
    # return_to_sender?: Boolean[];
    attr_accessor :return_to_sender

    # Destination country/region of the tracking detected from the courier. ISO Alpha-3 (three letters). Value will be `null` if the courier doesn't provide the destination country.
    # courier_destination_country_iso3?: String[];
    attr_accessor :courier_destination_country_iso3

    # Array of 
    # trackings?: Tracking[];
    attr_accessor :trackings

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `AftershipAPI::DataTrackingResponseGetMultipleV1` initialize method"
      end

      attributes = attributes.each_with_object({}) { |(k, v), h|
        h[k.to_sym] = v
      }

      if attributes.key?(:'page')
        self.page = attributes[:'page']
      end 

      if attributes.key?(:'limit')
        self.limit = attributes[:'limit']
      end 

      if attributes.key?(:'count')
        self.count = attributes[:'count']
      end 

      if attributes.key?(:'keyword')
        self.keyword = attributes[:'keyword']
      end 

      if attributes.key?(:'slug')
        self.slug = attributes[:'slug']
      end 

      if attributes.key?(:'origin')
        self.origin = attributes[:'origin']
      end 

      if attributes.key?(:'destination')
        self.destination = attributes[:'destination']
      end 

      if attributes.key?(:'tag')
        self.tag = attributes[:'tag']
      end 

      if attributes.key?(:'created_at_min')
        self.created_at_min = attributes[:'created_at_min']
      end 

      if attributes.key?(:'created_at_max')
        self.created_at_max = attributes[:'created_at_max']
      end 

      if attributes.key?(:'last_updated_at')
        self.last_updated_at = attributes[:'last_updated_at']
      end 

      if attributes.key?(:'return_to_sender')
        self.return_to_sender = attributes[:'return_to_sender']
      end 

      if attributes.key?(:'courier_destination_country_iso3')
        self.courier_destination_country_iso3 = attributes[:'courier_destination_country_iso3']
      end 

      if attributes.key?(:'trackings')
        self.trackings = attributes[:'trackings']
      end 
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'page' => :'Integer',
        :'limit' => :'Integer',
        :'count' => :'Integer',
        :'keyword' => :'String',
        :'slug' => :'String',
        :'origin' => :'Array<String>',
        :'destination' => :'Array<String>',
        :'tag' => :'TagV1',
        :'created_at_min' => :'String',
        :'created_at_max' => :'String',
        :'last_updated_at' => :'String',
        :'return_to_sender' => :'Array<Boolean>',
        :'courier_destination_country_iso3' => :'Array<String>',
        :'trackings' => :'Array<Tracking>',
      }
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'page' => :'page',
        :'limit' => :'limit',
        :'count' => :'count',
        :'keyword' => :'keyword',
        :'slug' => :'slug',
        :'origin' => :'origin',
        :'destination' => :'destination',
        :'tag' => :'tag',
        :'created_at_min' => :'created_at_min',
        :'created_at_max' => :'created_at_max',
        :'last_updated_at' => :'last_updated_at',
        :'return_to_sender' => :'return_to_sender',
        :'courier_destination_country_iso3' => :'courier_destination_country_iso3',
        :'trackings' => :'trackings',
      }
    end

    # Builds the object from hash
    # @param attributes [Hash] Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(key) && attributes[key].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[key].is_a?(Array)
            transformed_hash["#{key}"] = attributes[key].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[key].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[key])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param type [String] Data type
    # @param value [String] Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        klass = AftershipAPI::Model.const_get(type)
        klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param value [Object] Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

    def to_json(*a)
      to_hash.to_json(*a)
    end
  end
end

