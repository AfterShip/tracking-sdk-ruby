# This code was auto generated by AfterShip SDK Generator.
# Do not edit the class manually.
module AftershipAPI::Model
  class PartialUpdateTracking
    # A unique identifier generated by AfterShip for the tracking.
    # id?: String;
    attr_accessor :id

    # Tracking number.
    # tracking_number?: String;
    attr_accessor :tracking_number

    # Unique code of courier. Get the slugs from .
    # slug?: String;
    attr_accessor :slug

    # Additional field required by some carriers to retrieve the tracking info. The shipper’s carrier account number. Refer to our article on  for more details.
    # tracking_account_number?: String;
    attr_accessor :tracking_account_number

    # Additional field required by some carriers to retrieve the tracking info. The origin country/region of the shipment. Refer to our article on  for more details.
    # tracking_origin_country?: String;
    attr_accessor :tracking_origin_country

    # Additional field required by some carriers to retrieve the tracking info. The destination country/region of the shipment. Refer to our article on  for more details.
    # tracking_destination_country?: String;
    attr_accessor :tracking_destination_country

    # Additional field required by some carriers to retrieve the tracking info. A type of tracking credential required by some carriers. Refer to our article on  for more details.
    # tracking_key?: String;
    attr_accessor :tracking_key

    # Additional field required by some carriers to retrieve the tracking info. The date the shipment was sent, using the format YYYYMMDD. Refer to our article on  for more details.
    # tracking_ship_date?: String;
    attr_accessor :tracking_ship_date

    # Additional field required by some carriers to retrieve the tracking info. The postal code of the recipient’s address. Refer to our article on  for more details.
    # tracking_postal_code?: String;
    attr_accessor :tracking_postal_code

    # Additional field required by some carriers to retrieve the tracking info. The state/province of the recipient’s address. Refer to our article on  for more details.
    # tracking_state?: String;
    attr_accessor :tracking_state

    # Whether or not AfterShip will continue tracking the shipments. Value is `false` when tag (status) is `Delivered`, `Expired`, or further updates for 30 days since last update.
    # active?: Boolean;
    attr_accessor :active

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `AftershipAPI::PartialUpdateTracking` initialize method"
      end

      attributes = attributes.each_with_object({}) { |(k, v), h|
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end 

      if attributes.key?(:'tracking_number')
        self.tracking_number = attributes[:'tracking_number']
      end 

      if attributes.key?(:'slug')
        self.slug = attributes[:'slug']
      end 

      if attributes.key?(:'tracking_account_number')
        self.tracking_account_number = attributes[:'tracking_account_number']
      end 

      if attributes.key?(:'tracking_origin_country')
        self.tracking_origin_country = attributes[:'tracking_origin_country']
      end 

      if attributes.key?(:'tracking_destination_country')
        self.tracking_destination_country = attributes[:'tracking_destination_country']
      end 

      if attributes.key?(:'tracking_key')
        self.tracking_key = attributes[:'tracking_key']
      end 

      if attributes.key?(:'tracking_ship_date')
        self.tracking_ship_date = attributes[:'tracking_ship_date']
      end 

      if attributes.key?(:'tracking_postal_code')
        self.tracking_postal_code = attributes[:'tracking_postal_code']
      end 

      if attributes.key?(:'tracking_state')
        self.tracking_state = attributes[:'tracking_state']
      end 

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end 
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'tracking_number' => :'String',
        :'slug' => :'String',
        :'tracking_account_number' => :'String',
        :'tracking_origin_country' => :'String',
        :'tracking_destination_country' => :'String',
        :'tracking_key' => :'String',
        :'tracking_ship_date' => :'String',
        :'tracking_postal_code' => :'String',
        :'tracking_state' => :'String',
        :'active' => :'Boolean',
      }
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'tracking_number' => :'tracking_number',
        :'slug' => :'slug',
        :'tracking_account_number' => :'tracking_account_number',
        :'tracking_origin_country' => :'tracking_origin_country',
        :'tracking_destination_country' => :'tracking_destination_country',
        :'tracking_key' => :'tracking_key',
        :'tracking_ship_date' => :'tracking_ship_date',
        :'tracking_postal_code' => :'tracking_postal_code',
        :'tracking_state' => :'tracking_state',
        :'active' => :'active',
      }
    end

    # Builds the object from hash
    # @param attributes [Hash] Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(key) && attributes[key].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[key].is_a?(Array)
            transformed_hash["#{key}"] = attributes[key].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[key].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[key])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param type [String] Data type
    # @param value [String] Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        klass = AftershipAPI::Model.const_get(type)
        klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param value [Object] Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

    def to_json(*a)
      to_hash.to_json(*a)
    end
  end
end
